<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>blag</title><link href="http://avi.im/blag/" rel="alternate"></link><link href="http://avi.im/blag/feeds/category/code.atom.xml" rel="self"></link><id>http://avi.im/blag/</id><updated>2016-02-19T23:03:00+05:30</updated><entry><title>Git/Github fork-pull request-update cycle</title><link href="http://avi.im/blag/2016/git-fork-cycle-github/" rel="alternate"></link><updated>2016-02-19T23:03:00+05:30</updated><author><name>avi</name></author><id>tag:avi.im,2016-02-19:blag/2016/git-fork-cycle-github/</id><summary type="html">&lt;p&gt;Lets say there is a project called &lt;code&gt;python&lt;/code&gt; and you want to contribute. So you should fork &lt;code&gt;python&lt;/code&gt; project and ALWAYS create a separate branch for the patch/feature you are working on and NEVER commit on the master branch of forked repo.&lt;/p&gt;
&lt;p&gt;Lets call your forked repo as &lt;code&gt;python-forked&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once you fork a project, add a git remote called &lt;code&gt;upstream&lt;/code&gt; (or whatever name you feel like using), which points to original repo. This remote will help you keep your project updated and in sync with original repo (from where you forked).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python-forked
&lt;span class="nv"&gt;$ &lt;/span&gt;git remote add upstream https://github.com/guido/python.git 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Consider 3 scenarios.&lt;/p&gt;
&lt;h3&gt;The simple, fork and send PR&lt;/h3&gt;
&lt;p&gt;Create a new branch, name it on the patch/feature you are working on:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python-forked
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout -b bugfix-unicode-strings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Work on &lt;code&gt;bugfix-unicode-strings&lt;/code&gt; and make all the changes you want. And then do a push to your github account, which is usually &lt;code&gt;origin&lt;/code&gt; remote:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git push origin bugfix-unicode-strings
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And then send PR, to &lt;code&gt;master&lt;/code&gt; branch of &lt;code&gt;guido/python&lt;/code&gt;, with your branch &lt;code&gt;bugfix-unicode-strings&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now, tomorrow, guido may add new features and you might want to update your forked repo. It's simple, just pull from the &lt;code&gt;upstream&lt;/code&gt; to &lt;code&gt;master&lt;/code&gt; branch of &lt;code&gt;python-forked&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python-forked
&lt;span class="nv"&gt;$ &lt;/span&gt;git fetch upstream
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase upstream/master
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Update and PR&lt;/h3&gt;
&lt;p&gt;You have forked the project and maintainer has later moved on and added new features which you need in the current patch you are working on&lt;/p&gt;
&lt;p&gt;You need to fetch the new changes from &lt;code&gt;upstream&lt;/code&gt; and put those in your &lt;code&gt;patch&lt;/code&gt; branch. While doing this, usually I update my master branch also:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python-forked
&lt;span class="nv"&gt;$ &lt;/span&gt;git fetch upstream
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase upstream/master
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout existing-patch-I-am-working-on
&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could also do &lt;code&gt;$ git rebase upstream/master&lt;/code&gt; in last step to update the current patch branch. &lt;/p&gt;
&lt;h3&gt;Update, merge and PR&lt;/h3&gt;
&lt;p&gt;You have forked the project and maintainer has made some changes to the file you are also working on&lt;/p&gt;
&lt;p&gt;Fetch the changes and merge it with current patch branch you are working:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;python-forked
&lt;span class="nv"&gt;$ &lt;/span&gt;git fetch upstream
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout master
&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase upstream/master
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout existing-patch-I-am-working-on-which-has-a-file-edited-by-guido
&lt;span class="nv"&gt;$ &lt;/span&gt;git rebase master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;above rebase will fail(?) (or interrupted) and terminal will ask you to resolve the conflicts and then merge.&lt;/p&gt;
&lt;p&gt;usually:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# solve the conflicts
$ git rebase --continue
&lt;/pre&gt;&lt;/div&gt;</summary><category term="git"></category><category term="github"></category><category term="open-source"></category></entry><entry><title>Using uWSGI with Python 3</title><link href="http://avi.im/blag/2015/uwsgi-python3/" rel="alternate"></link><updated>2015-12-18T14:03:00+05:30</updated><author><name>avi</name></author><id>tag:avi.im,2015-12-18:blag/2015/uwsgi-python3/</id><summary type="html">&lt;p&gt;Gevent does not have Python 3 support yet, but its available as a release candidate. So this will lead to problems if you use the latest stable Gevent with Python 3. Follow these simple steps to install uSWGI and Gevent properly for Python 3. &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Uninstall existing uWSGI:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip uninstall uwsgi
pip3 uninstall uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install everything via &lt;code&gt;pip3&lt;/code&gt; and use Gevent v1.1rc3:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;pip install gevent==1.1rc3
pip install uwsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Note: Above instructions will be obsolete once Gevent stable has Python 3 support.&lt;/p&gt;</summary><category term="python"></category><category term="django"></category><category term="web"></category><category term="self-notes"></category></entry><entry><title>Staying Ahead of Amazon, in Amazon Treasure Hunt Contest</title><link href="http://avi.im/blag/2015/amazon-treasure-hunt/" rel="alternate"></link><updated>2015-10-31T22:20:00+05:30</updated><author><name>avi</name></author><id>tag:avi.im,2015-10-31:blag/2015/amazon-treasure-hunt/</id><summary type="html">&lt;p&gt;Last week Amazon India had a Treasure Hunt contest which ran for a whole week. The contest was simple, from 10am to 6pm, every hour Amazon would display a clue (image) and you had to guess the product. That particular product would be on sale for ₹1, which also included shipping cost anywhere in India. The contest was app only i.e. image also would be displayed in the app and you had to buy using the app.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://avi.im/blag/images/2015/amazon-treasure/makeymakey1.jpg" alt="makey makey offer page" style="width: 50%;"/&gt;&lt;img src="http://avi.im/blag/images/2015/amazon-treasure/makeymakey2.jpg" alt="makey makey cart" style="width: 50%;"/&gt;&lt;/p&gt;
&lt;p&gt;Above images show &lt;a href="http://www.amazon.in/dp/B008SFLEPE/"&gt;Makey Makey&lt;/a&gt; on promo.&lt;/p&gt;
&lt;p&gt;Problem was, too many people were participating in the contest and by the time you could guess the product, search it in the app and add to your cart, it would be out of stock. Because quantity of the product on sale was only one. So you had to be very very quick.&lt;/p&gt;
&lt;p&gt;Using &lt;a href="https://mitmproxy.org/"&gt;MITM&lt;/a&gt;, I started monitoring the API calls. In one of the calls, I found out the request which was asking for the contest image:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;https://images-eu.ssl-images-amazon.com/images/G/31/img13/mshop/treasure/clues-20/Clue5._UX828_SX828_V290896415_.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the time of this writing, above link is still active. In case Amazon removes it, you can check the &lt;a href="https://archive.is/tpoLd"&gt;archived link&lt;/a&gt;. This clue leads to &lt;a href="http://www.amazon.in/dp/B00NPSTO42/"&gt;Canon Powershot SX400&lt;/a&gt; and it was actually sold for ₹1.&lt;/p&gt;
&lt;p&gt;I changed string &lt;code&gt;Clue5&lt;/code&gt; to &lt;code&gt;Clue6&lt;/code&gt; (after other trial and errors) and I had access to the next clue, even before the contest was live:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;https://images-eu.ssl-images-amazon.com/images/G/31/img13/mshop/treasure/clues-20/Clue6._UX828_SX828_V290896415_.png
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here's the &lt;a href="https://archive.is/3tlhv"&gt;archived link&lt;/a&gt;. Now all I had do was increase the value and get all images. &lt;/p&gt;
&lt;p&gt;The clues did not require any authentication or special headers (and that's how &lt;a href="https://archive.is"&gt;archive.is&lt;/a&gt; is able to GET and archive it).&lt;/p&gt;</summary><category term="hacking"></category></entry><entry><title>I discovered a vulnerability on Gaana.com before the main POC hack</title><link href="http://avi.im/blag/2015/hacking-gaana/" rel="alternate"></link><updated>2015-06-01T13:18:00+05:30</updated><author><name>avi</name></author><id>tag:avi.im,2015-05-31:blag/2015/hacking-gaana/</id><summary type="html">&lt;p&gt;&lt;strong&gt;Update&lt;/strong&gt;: I have removed the blog post. TLDR; On 12th of May I had discovered a vulnerability on Gaana.com. I contacted their team and it was fixed recently. I had written blog post in detail about it, now I think it's best I remove everything. Thanks for reading!&lt;/p&gt;
&lt;script data-isso="//comments.example.tld/" src="//comments.example.tld/js/embed.min.js"&gt;&lt;/script&gt;

&lt;section id="isso-thread"&gt;&lt;/section&gt;</summary><category term="hacking"></category><category term="python"></category></entry><entry><title>Scraping Javascript page using Python</title><link href="http://avi.im/blag/2014/scraping-javascript-website-python/" rel="alternate"></link><updated>2014-10-18T14:03:00+05:30</updated><author><name>avi</name></author><id>tag:avi.im,2014-10-18:blag/2014/scraping-javascript-website-python/</id><summary type="html">&lt;p&gt;Python library &lt;a href="https://github.com/niklasb/dryscrape"&gt;dryscape&lt;/a&gt; can be used to scrape javascript driven websites. &lt;/p&gt;
&lt;h1&gt;Code&lt;/h1&gt;
&lt;p&gt;To give an example, I created a sample page with following HTML code. (&lt;a href="http://avi.im/stuff/js-or-no-js.html"&gt;link&lt;/a&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;meta&lt;/span&gt; &lt;span class="na"&gt;charset=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Javascript scraping test&lt;span class="nt"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;p&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;#39;intro-text&amp;#39;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;No javascript support&lt;span class="nt"&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
     &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;intro-text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Yay! Supports javascript&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt; 
&lt;span class="nt"&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;without javascript it says: &lt;code&gt;No javascript support&lt;/code&gt; and with javascript: &lt;code&gt;Yay! Supports javascript&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Scraping without JS support:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;intro-text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;intro-text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;No&lt;/span&gt; &lt;span class="n"&gt;javascript&lt;/span&gt; &lt;span class="n"&gt;support&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Scraping with JS support:&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;dryscrape&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;dryscrape&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;visit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;response&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;body&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;response&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;soup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;intro-text&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;intro-text&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;Yay&lt;/span&gt;&lt;span class="err"&gt;!&lt;/span&gt; &lt;span class="n"&gt;Supports&lt;/span&gt; &lt;span class="n"&gt;javascript&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="python"></category><category term="scraping"></category></entry></feed>